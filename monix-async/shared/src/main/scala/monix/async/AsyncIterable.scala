/*
 * Copyright (c) 2014-2016 by its authors. Some rights reserved.
 * See the project homepage at: https://monix.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package monix.async

import monix.async.AsyncIterable._
import monix.execution.Scheduler
import scala.collection.{LinearSeq, mutable}
import scala.util.control.NonFatal
import scala.collection.immutable

/** An `AsyncIterable` represents a [[Task]] based asynchronous
  * iterator, generated by [[AsyncIterable]].
  */
sealed trait AsyncIterable[+A] {
  /** Filters the `AsyncIterable` by the given predicate function,
    * returning only those elements that match.
    */
  def filter(p: A => Boolean): AsyncIterable[A] =
    this match {
      case ref @ Next(head, tail) =>
        try { if (p(head)) ref else Wait(tail) }
        catch { case NonFatal(ex) => Error(ex) }
      case NextSeq(head, rest) =>
        try head.filter(p) match {
          case Nil => Wait(rest)
          case filtered => NextSeq(filtered, rest)
        } catch {
          case NonFatal(ex) => Error(ex)
        }
      case Wait(rest) => Wait(rest.map(_.filter(p)))
      case Empty => Empty
      case Error(ex) => Error(ex)
    }

  /** Returns a new iterable by mapping the supplied function
    * over the elements of the source.
    */
  final def map[B](f: A => B): AsyncIterable[B] =
    this match {
      case Next(head, tail: Task[AsyncIterable[A]]) =>
        try { Next(f(head), tail.map(_.map(f))) }
        catch { case NonFatal(ex) => Error(ex) }
      case NextSeq(head, rest) =>
        try { NextSeq(head.map(f), rest.map(_.map(f))) }
        catch { case NonFatal(ex) => Error(ex) }

      case Wait(rest) => Wait(rest.map(_.map(f)))
      case Empty => Empty
      case Error(ex) => Error(ex)
    }

  /** Applies the function to the elements of the source
    * and concatenates the results.
    */
  final def flatMap[B](f: A => AsyncIterable[B]): AsyncIterable[B] =
    this match {
      case Next(head, tail: Task[AsyncIterable[A]]) =>
        try { f(head) ++ Wait(tail.map(_.flatMap(f))) }
        catch { case NonFatal(ex) => Error(ex) }
      case NextSeq(list, rest) =>
        try {
          if (list.isEmpty)
            Wait(rest.map(_.flatMap(f)))
          else
            f(list.head) ++ NextSeq(list.tail, EmptyTask).flatMap(f) ++ Wait(rest.map(_.flatMap(f)))
        } catch {
          case NonFatal(ex) => Error(ex)
        }

      case Wait(rest) => Wait(rest.map(_.flatMap(f)))
      case Empty => Empty
      case Error(ex) => Error(ex)
    }

  /** If the source is an async iterable generator, then
    * concatenates the generated async iterables.
    */
  final def flatten[B](implicit ev: A <:< AsyncIterable[B]): AsyncIterable[B] =
    flatMap(x => x)

  /** Alias for [[flatMap]]. */
  final def concatMap[B](f: A => AsyncIterable[B]): AsyncIterable[B] =
    flatMap(f)

  /** Alias for [[concat]]. */
  final def concat[B](implicit ev: A <:< AsyncIterable[B]): AsyncIterable[B] =
    flatten

  /** Appends the given iterable to the end of the source,
    * effectively concatenating them.
    */
  final def ++[B >: A](rhs: AsyncIterable[B]): AsyncIterable[B] =
    this match {
      case Wait(task) =>
        Wait(task.map(_ ++ rhs))
      case Next(a, lt) =>
        Next(a, lt.map(_ ++ rhs))
      case NextSeq(head, lt) =>
        NextSeq(head, lt.map(_ ++ rhs))
      case Empty => rhs
      case Error(ex) => Error(ex)
    }

  /** Right associative lazy fold on `AsyncIterable` using the
    * folding function 'f'.
    *
    * This method evaluates `lb` lazily (in some cases it will not be
    * needed), and returns a lazy value. We are using `(A, Eval[B]) =>
    * Eval[B]` to support laziness in a stack-safe way. Chained
    * computation should be performed via .map and .flatMap.
    *
    * For more detailed information about how this method works see the
    * documentation for `Eval[_]`.
    */
  def foldRightA[B](lb: Task[B])(f: (A, Task[B]) => Task[B]): Task[B] =
    this match {
      case Empty => lb
      case Error(ex) => Task.error(ex)
      case Wait(next) =>
        next.flatMap(_.foldRightA(lb)(f))
      case Next(a, next) =>
        f(a, next.flatMap(_.foldRightA(lb)(f)))

      case NextSeq(list, next) =>
        if (list.isEmpty) next.flatMap(_.foldRightA(lb)(f))
        else {
          val a = list.head
          val tail = list.tail
          val rest = Task.now(NextSeq(tail, next))
          f(a, rest.flatMap(_.foldRightA(lb)(f)))
        }
    }

  /** Find the first element matching the predicate, if one exists. */
  def findA(p: A => Boolean): Task[Option[A]] =
    foldRightA(Task.now(Option.empty[A])) { (a, lb) =>
      if (p(a)) Task.now(Some(a)) else lb
    }

  /** Materializes the stream and for each element applies
    * the given function.
    *
    * @return a [[CancelableFuture]] that will complete when
    *         the streaming is done and that can also be used to
    *         cancel the streaming.
    */
  def foreach(f: A => Unit)(implicit s: Scheduler): CancelableFuture[Unit] = {
    def loop(task: Task[AsyncIterable[A]]): Task[Unit] = task.flatMap {
      case Next(elem, rest) =>
        try { f(elem); loop(rest) }
        catch { case NonFatal(ex) => s.reportFailure(ex); Task.unit }

      case NextSeq(elems, rest) =>
        try { elems.foreach(f); loop(rest) }
        catch { case NonFatal(ex) => s.reportFailure(ex); Task.unit }

      case Wait(rest) => loop(rest)
      case Empty => Task.unit
      case Error(ex) =>
        s.reportFailure(ex)
        Task.unit
    }

    loop(Task.now(this)).runAsync
  }
}

object AsyncIterable {
  /** Lifts a strict value into an `AsyncIterable` */
  def now[A](a: A): AsyncIterable[A] = Next(a, EmptyTask)

  /** Builder for an [[Error]] state. */
  def error[A](ex: Throwable): AsyncIterable[A] = Error(ex)

  /** Builder for an [[Empty]] state. */
  def empty[A]: AsyncIterable[A] = Empty

  /** Builder for a [[Wait]] iterator state. */
  def wait[A](rest: Task[AsyncIterable[A]]): AsyncIterable[A] = Wait(rest)

  /** Builds a [[Next]] iterator state. */
  def next[A](head: A, rest: Task[AsyncIterable[A]]): AsyncIterable[A] =
    Next(head, rest)

  /** Builds a [[Next]] iterator state. */
  def nextSeq[A](headSeq: LinearSeq[A], rest: Task[AsyncIterable[A]]): AsyncIterable[A] =
    NextSeq(headSeq, rest)

  /** Lifts a strict value into an `AsyncIterable` */
  def evalAlways[A](a: => A): AsyncIterable[A] =
    Wait(Task.evalAlways(try Next(a, EmptyTask) catch { case NonFatal(ex) => Error(ex) }))

  /** Lifts a strict value into an `AsyncIterable` and
    * memoizes the result for subsequent executions.
    */
  def evalOnce[A](a: => A): AsyncIterable[A] =
    Wait(Task.evalOnce(try Next(a, EmptyTask) catch { case NonFatal(ex) => Error(ex) }))

  /** Promote a non-strict value representing a AsyncIterable
    * to an AsyncIterable of the same type.
    */
  def defer[A](fa: => AsyncIterable[A]): Wait[A] =
    Wait(Task.defer(Task.evalAlways(fa)))

  /** Converts any sequence into an async iterable.
    *
    * Because the list is a linear sequence that's known
    * (but not necessarily strict), we'll just return
    * a strict state.
    */
  def fromList[A](list: immutable.LinearSeq[A], batchSize: Int): AsyncIterable[A] =
    NextSeq[A](list, EmptyTask)

  /** Converts an iterable into an async iterator. */
  def fromIterable[A](iterable: Iterable[A], batchSize: Int): AsyncIterable[A] =
    Wait(Task.evalAlways(iterable.iterator).flatMap { iterator => fromIterator(iterator, batchSize) })

  /** Converts an iterator into an async iterator. */
  def fromIterator[A](iterator: Iterator[A], batchSize: Int): Task[AsyncIterable[A]] =
    Task.now(iterator).map { iterator =>
      try {
        val buffer = mutable.ListBuffer.empty[A]
        var processed = 0
        while (processed < batchSize && iterator.hasNext) {
          buffer += iterator.next()
          processed += 1
        }

        if (processed == 0) Empty else
          NextSeq(buffer.toList, fromIterator(iterator, batchSize))
      } catch {
        case NonFatal(ex) => Error(ex)
      }
    }

  /** A state of the [[AsyncIterable]] representing a deferred iterator. */
  final case class Wait[+A](next: Task[AsyncIterable[A]]) extends AsyncIterable[A]

  /** A state of the [[AsyncIterable]] representing a head/tail decomposition.
    *
    * @param head is the next element to be processed
    * @param rest is the next state in the sequence
    */
  final case class Next[+A](head: A, rest: Task[AsyncIterable[A]]) extends AsyncIterable[A]

  /** A state of the [[AsyncIterable]] representing a head/tail decomposition.
    *
    * Like [[Next]] except that the head is a strict sequence
    * of elements that don't need asynchronous execution.
    * Meant for doing buffering.
    *
    * @param headSeq is a sequence of the next elements to be processed, can be empty
    * @param rest is the next state in the sequence
    */
  case class NextSeq[+A](headSeq: LinearSeq[A], rest: Task[AsyncIterable[A]]) extends AsyncIterable[A]

  /** Represents an error state in the iterator.
    *
    * This is a final state. When this state is received, the data-source
    * should have been canceled already.
    *
    * @param ex is an error that was thrown.
    */
  case class Error(ex: Throwable) extends AsyncIterable[Nothing]

  /** Represents an empty iterator.
    *
    * Received as a final state in the iteration process.
    * When this state is received, the data-source should have
    * been canceled already.
    */
  case object Empty extends AsyncIterable[Nothing]

  // Reusable instances
  private[async] final val EmptyTask = Task.now(Empty)
}